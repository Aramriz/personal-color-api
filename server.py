import os
import requests
import colorsys
import cv2  # ‡∏ô‡∏≥‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
import dlib # ‡∏ô‡∏≥‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
import numpy as np # ‡∏ô‡∏≥‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
from flask import Flask, request, jsonify
from google.cloud import vision

# --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ---
app = Flask(__name__)
# ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ path ‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Environment Variable
vision_client = vision.ImageAnnotatorClient()

# --- ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Ç‡∏≠‡∏á Dlib ---
print("‚è≥ Loading Dlib models...")
# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå shape_predictor_68_face_landmarks.dat ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö server.py
dlib_face_detector = dlib.get_frontal_face_detector()
dlib_landmark_predictor = dlib.shape_predictor("shape_predictor_68_face_landmarks.dat")
print("‚úÖ Dlib models loaded successfully.")

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏≥‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤ ---
def extract_facial_colors(image_bytes):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏™‡∏µ‡∏à‡∏≤‡∏Å‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏Å‡πâ‡∏°‡πÅ‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡∏ú‡∏≤‡∏Å
    """
    try:
        # 1. ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• bytes ‡πÄ‡∏õ‡πá‡∏ô image array ‡∏ó‡∏µ‡πà OpenCV ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
        image_np_array = np.frombuffer(image_bytes, np.uint8)
        img = cv2.imdecode(image_np_array, cv2.IMREAD_COLOR)
        if img is None:
            print("‚ùå Error: Could not decode image from bytes.")
            return []

        img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        
        # 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
        faces = dlib_face_detector(img_rgb)
        if not faces:
            print("‚ö†Ô∏è No faces detected by Dlib.")
            return []

        face = faces[0] # ‡πÉ‡∏ä‡πâ‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠
        landmarks = dlib_landmark_predictor(img_rgb, face)
        
        # 3. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à (‡πÅ‡∏Å‡πâ‡∏°‡∏ã‡πâ‡∏≤‡∏¢, ‡πÅ‡∏Å‡πâ‡∏°‡∏Ç‡∏ß‡∏≤, ‡∏´‡∏ô‡πâ‡∏≤‡∏ú‡∏≤‡∏Å)
        cheek_left_pts = landmarks.parts()[2].x, landmarks.parts()[29].y
        cheek_right_pts = landmarks.parts()[14].x, landmarks.parts()[29].y
        forehead_pts = landmarks.parts()[27].x, (landmarks.parts()[21].y + landmarks.parts()[22].y) // 2
        
        # 4. ‡∏î‡∏∂‡∏á‡∏™‡∏µ‡∏à‡∏≤‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        colors = []
        if 0 <= forehead_pts[1] < img_rgb.shape[0] and 0 <= forehead_pts[0] < img_rgb.shape[1]:
            colors.append(img_rgb[forehead_pts[1], forehead_pts[0]])
        if 0 <= cheek_left_pts[1] < img_rgb.shape[0] and 0 <= cheek_left_pts[0] < img_rgb.shape[1]:
            colors.append(img_rgb[cheek_left_pts[1], cheek_left_pts[0]])
        if 0 <= cheek_right_pts[1] < img_rgb.shape[0] and 0 <= cheek_right_pts[0] < img_rgb.shape[1]:
            colors.append(img_rgb[cheek_right_pts[1], cheek_right_pts[0]])
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô format ‡∏ó‡∏µ‡πà Google Vision ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏∑‡πà‡∏ô
        dominant_colors_from_face = []
        for color in colors:
            color_obj = vision.ColorInfo(color=vision.Color(red=color[0], green=color[1], blue=color[2]), pixel_fraction=1.0/len(colors))
            dominant_colors_from_face.append(color_obj)

        return dominant_colors_from_face

    except Exception as e:
        print(f"Error in extract_facial_colors: {e}")
        return []


def get_color_palette_from_colormind(base_colors):
    # (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£)
    input_data = []
    for color in base_colors:
        rgb = color.color
        input_data.append([int(rgb.red), int(rgb.green), int(rgb.blue)])
    while len(input_data) < 5:
        input_data.append("N")
    colormind_api_url = "http://colormind.io/api/"
    request_body = {"model": "default", "input": input_data[:5]}
    try:
        response = requests.post(colormind_api_url, json=request_body)
        response.raise_for_status()
        return response.json().get("result")
    except requests.exceptions.RequestException as e:
        print(f"Error calling Colormind API: {e}")
        return None

def analyze_personal_color(dominant_colors):
    # (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£)
    warm_colors_count = 0
    cool_colors_count = 0
    light_colors_count = 0
    dark_colors_count = 0
    for color_info in dominant_colors:
        r, g, b = color_info.color.red, color_info.color.green, color_info.color.blue
        if r > b:
            warm_colors_count += 1
        else:
            cool_colors_count += 1
        h, l, s = colorsys.rgb_to_hls(r/255.0, g/255.0, b/255.0)
        if l > 0.55:
            light_colors_count += 1
        else:
            dark_colors_count += 1
    undertone = "Warm" if warm_colors_count > cool_colors_count else "Cool"
    feature_brightness = "Light" if light_colors_count > dark_colors_count else "Dark"
    print(f"üé® Analysis: Undertone={undertone}, Features={feature_brightness}")
    final_season = "Unknown"
    if undertone == "Warm":
        final_season = "Autumn" if feature_brightness == "Dark" else "Spring"
    else: # Cool
        final_season = "Winter" if feature_brightness == "Dark" else "Summer"
    return {"season": final_season, "undertone": undertone}


@app.route("/analyze", methods=["POST"])
def analyze_image():
    if 'image' not in request.files:
        return jsonify({"error": "No image file found"}), 400
    image_file = request.files['image']
    content = image_file.read()
    print("‚úÖ 1. Image file received successfully.")
    
    try:
        # --- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡πÉ‡∏ä‡πâ Dlib ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏™‡∏µ‡∏à‡∏≤‡∏Å‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤ ---
        print("‚è≥ 2. Using Dlib to extract facial colors...")
        dominant_colors = extract_facial_colors(content)
        
        # --- ‡∏ñ‡πâ‡∏≤ Dlib ‡∏´‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ Google Vision API ‡πÅ‡∏ó‡∏ô ---
        if not dominant_colors:
            print("‚ö†Ô∏è Dlib failed or found no face. Falling back to Google Vision API.")
            print("‚è≥ 2. Calling Google Vision API...")
            image = vision.Image(content=content) 
            response = vision_client.image_properties(image=image)
            dominant_colors = response.image_properties_annotation.dominant_colors.colors
            if not dominant_colors:
                return jsonify({"error": "No dominant colors found by Dlib or Google Vision"}), 404
        
        print("‚úÖ 2. Dominant colors extracted successfully.")
        
        # --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ---
        print("‚è≥ 3. Calling Colormind API...")
        final_palette = get_color_palette_from_colormind(dominant_colors)
        if not final_palette:
            return jsonify({"error": "Failed to generate palette from Colormind"}), 500
        print("‚úÖ 3. Colormind API responded successfully.")

        analysis = analyze_personal_color(dominant_colors)
        calculated_season = analysis["season"]
        calculated_undertone = analysis["undertone"]
        
        color_recommendations = {
            "Autumn": ["Brown", "Caramel", "Mustard", "Olive Green", "Beige"],
            "Spring": ["Cream", "Light Orange", "Coral", "Peach", "Lime Green"],
            "Winter": ["Royal Blue", "True Red", "Lemon Yellow", "Hot Pink", "Pure White"],
            "Summer": ["Pastel Pink", "Sky Blue", "Seafoam", "Light Grey", "Lavender"]
        }
        calculated_color_names = color_recommendations.get(calculated_season, ["Color 1", "Color 2", "Color 3", "Color 4", "Color 5"])

        print(f"üéâ Final Analysis: Season='{calculated_season}', Undertone='{calculated_undertone}'")
        return jsonify({
            "message": "Analysis successful",
            "palette": final_palette,
            "undertone": calculated_undertone,
            "personalSeason": calculated_season,
            "colorNames": calculated_color_names
        })

    except Exception as e:
        print(f"‚ùå‚ùå‚ùå AN ERROR OCCURRED DURING ANALYSIS: {e}")
        return jsonify({"error": f"An unexpected error occurred during analysis: {e}"}), 500


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True, use_reloader=False)